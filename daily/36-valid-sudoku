Time: O(n), n is the number of elements in the board which is 81
Space: O(n), n is the number of elements in the board which is 81

/**
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function (board) {
    const cols = Array.from({ length: board.length }, () => new Set())
    const rows = Array.from({ length: board.length }, () => new Set())
    const subboxes = Array.from({ length: board.length }, () => new Set())
    // preprocess sets
    for (let i = 0; i < board.length; i++) {
        for (let j = 0; j < board[0].length; j++) {
            const val = board[i][j]
            if (val === ".") continue;
            const colHasVal = cols[j].has(val)
            const rowHasVal = rows[i].has(val)
            const subboxHasVal = subboxes[getSubboxIndex(i, j)].has(val)
            if (colHasVal || rowHasVal || subboxHasVal) return false
            cols[j].add(val)
            rows[i].add(val)
            subboxes[getSubboxIndex(i, j)].add(val)
        }
    }

    function getSubboxIndex(i, j) {
        if (i < 3 && j < 3) return 0
        else if (i < 3 && j < 6) return 1
        else if (i < 3 && j < 9) return 2
        else if (i < 6 && j < 3) return 3
        else if (i < 6 && j < 6) return 4
        else if (i < 6 && j < 9) return 5
        else if (i < 9 && j < 3) return 6
        else if (i < 9 && j < 6) return 7
        else return 8
    }

    return true;
};
