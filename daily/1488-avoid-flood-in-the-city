Time: O(nlogn)
Space: O(n)

class Solution {
    public int[] avoidFlood(int[] rains) {
        Map<Integer, Integer> fullLakes = new HashMap<>();
        TreeSet<Integer> dryDays = new TreeSet<>();

        int[] res = new int[rains.length];
        Arrays.fill(res, 1);
        for (int i = 0; i < rains.length; i++) {
            int lake = rains[i];
            if (lake == 0) {
                dryDays.add(i);
                continue;
            }

            if (!fullLakes.containsKey(lake)) {
                fullLakes.put(lake, i);
                res[i] = -1;
                continue;
            }

            Integer dryDay = dryDays.ceiling(fullLakes.get(lake));
            if (dryDay == null) {
                return new int[0];
            }
            res[i] = -1;
            res[dryDay] = lake;
            dryDays.remove(dryDay);
            fullLakes.put(lake, i);
        }
        return res;
    }
}
