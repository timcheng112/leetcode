Time: O(nlogn)
Space: O(1) auxiliary, O(n) output.

/**
 * @param {number[]} spells
 * @param {number[]} potions
 * @param {number} success
 * @return {number[]}
 */
var successfulPairs = function (spells, potions, success) {
    potions.sort((a, b) => a - b);

    // binary search fn, returns index
    function search(val) {
        let left = 0, right = potions.length - 1;
        let index = -1;
        while (left <= right) {
            let mid = Math.floor((right + left) / 2);
            if (potions[mid] === val) {
                index = mid;
                right = mid - 1;
            } else if (potions[mid] > val) {
                index = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return index === -1 ? null : index;
    }

    const res = [];
    for (const spell of spells) {
        const minCost = Math.ceil(success / spell);
        const index = search(minCost);
        if (index == null) {
            res.push(0);
            continue;
        }
        res.push(potions.length - index);
    }
    return res;
};
