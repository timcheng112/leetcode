Time: O(mlogn) if mlogn > n, m is the number of operations, else O(n).
Space: O(n).

// have a map foods that points to the specific Food object
// have a map of treeset for each cuisine and it holds all the food of that cuisine

class FoodRatings {
    Map<String, Food> foods;
    Map<String, TreeSet<Food>> cuisines;

    // O(n)
    public FoodRatings(String[] foods, String[] cuisines, int[] ratings) {
        this.foods = new HashMap<>();
        this.cuisines = new HashMap<>();
        for (int i = 0; i < foods.length; i++) {
            Food food = new Food(foods[i], cuisines[i], ratings[i]);
            this.foods.put(food.name, food);
            this.cuisines.putIfAbsent(food.cuisine, new TreeSet<>(
                (a, b) -> {
                    if (a.rating != b.rating) return b.rating - a.rating;
                    return a.name.compareTo(b.name);
                }
            ));
            this.cuisines.get(food.cuisine).add(food);
        }
    }

    // O(logn)
    public void changeRating(String food, int newRating) {
        Food temp = this.foods.get(food);
        TreeSet<Food> set = this.cuisines.get(temp.cuisine);
        set.remove(temp);
        temp.rating = newRating;
        set.add(temp);
    }

    // O(logn)
    public String highestRated(String cuisine) {
        return this.cuisines.get(cuisine).first().name;
    }
}

class Food {
    String name;
    String cuisine;
    int rating;

    Food(String name, String cuisine, int rating) {
        this.name = name;
        this.cuisine = cuisine;
        this.rating = rating;
    }
}

/**
 * Your FoodRatings object will be instantiated and called as such:
 * FoodRatings obj = new FoodRatings(foods, cuisines, ratings);
 * obj.changeRating(food,newRating);
 * String param_2 = obj.highestRated(cuisine);
 */
