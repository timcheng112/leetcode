Time: O(9^n), where n is the number of cells in the board
Space: O(n), where n is the number of cells in the board

/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
var solveSudoku = function (board) {
    const cols = Array.from({ length: board.length }, () => new Set())
    const rows = Array.from({ length: board.length }, () => new Set())
    const grids = Array.from({ length: board.length }, () => new Set())
    const empties = [];
    let count = 0;
    // preprocess sets
    for (let i = 0; i < board.length; i++) {
        for (let j = 0; j < board[0].length; j++) {
            const val = board[i][j]
            if (val !== ".") {
                rows[i].add(val)
                cols[j].add(val)
                grids[getGridIndex(i, j)].add(val)
                count++;
            } else {
                empties.push([i, j]);
            }
        }
    }

    function dfs(index) {
        if (index === empties.length) return true;
        const curr = empties[index];
        const row = curr[0];
        const col = curr[1]
        const gridIndex = getGridIndex(row, col)
        for (let i = 1; i <= 9; i++) {
            const num = i.toString();
            if (isValid(num, row, col, gridIndex)) {
                board[row][col] = num;
                rows[row].add(num);
                cols[col].add(num);
                grids[gridIndex].add(num);
                if (dfs(index + 1)) return true;
                board[row][col] = ".";
                rows[row].delete(num);
                cols[col].delete(num);
                grids[gridIndex].delete(num);
            }
        }
        // no valid - need to backtrack
        return false;
    }

    function isValid(num, row, col, grid) {
        return !rows[row].has(num) && !cols[col].has(num) && !grids[grid].has(num);
    }

    function getGridIndex(i, j) {
        if (i < 3 && j < 3) return 0
        else if (i < 3 && j < 6) return 1
        else if (i < 3 && j < 9) return 2
        else if (i < 6 && j < 3) return 3
        else if (i < 6 && j < 6) return 4
        else if (i < 6 && j < 9) return 5
        else if (i < 9 && j < 3) return 6
        else if (i < 9 && j < 6) return 7
        else return 8
    }

    dfs(0);
    return board;
};

Optimised Pruning Solution

Time: worst case is still O(9^n) (exponential but unavoidable for general Sudoku).
      with Minimum Remaining Values (MRV) pruning: dramatically reduced in practice — typically milliseconds for 9×9.
Space: O(n)

/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
var solveSudoku = function (board) {
    const cols = Array.from({ length: board.length }, () => new Set())
    const rows = Array.from({ length: board.length }, () => new Set())
    const grids = Array.from({ length: board.length }, () => new Set())
    const empties = [];
    let count = 0;
    // preprocess sets
    for (let i = 0; i < board.length; i++) {
        for (let j = 0; j < board[0].length; j++) {
            const val = board[i][j]
            if (val !== ".") {
                rows[i].add(val)
                cols[j].add(val)
                grids[getGridIndex(i, j)].add(val)
                count++;
            } else {
                empties.push([i, j]);
            }
        }
    }

    function dfs(index) {
        if (index === empties.length) return true;
        const [row, col] = getNextCell();
        const gridIndex = getGridIndex(row, col)
        for (let i = 1; i <= 9; i++) {
            const num = i.toString();
            if (isValid(num, row, col, gridIndex)) {
                board[row][col] = num;
                rows[row].add(num);
                cols[col].add(num);
                grids[gridIndex].add(num);
                if (dfs(index + 1)) return true;
                board[row][col] = ".";
                rows[row].delete(num);
                cols[col].delete(num);
                grids[gridIndex].delete(num);
            }
        }
        // no valid - need to backtrack
        return false;
    }

    function isValid(num, row, col, grid) {
        return !rows[row].has(num) && !cols[col].has(num) && !grids[grid].has(num);
    }

    function getGridIndex(i, j) {
        if (i < 3 && j < 3) return 0
        else if (i < 3 && j < 6) return 1
        else if (i < 3 && j < 9) return 2
        else if (i < 6 && j < 3) return 3
        else if (i < 6 && j < 6) return 4
        else if (i < 6 && j < 9) return 5
        else if (i < 9 && j < 3) return 6
        else if (i < 9 && j < 6) return 7
        else return 8
    }

    function getNextCell() {
        let best = null;
        let minCandidates = 10; // max is 9
        for (let [r, c] of empties) {
            if (board[r][c] !== ".") continue; // skip filled
            let candidates = 0;
            for (let d = 1; d <= 9; d++) {
                if (isValid(d.toString(), r, c, getGridIndex(r, c))) candidates++;
            }
            if (candidates < minCandidates) {
                minCandidates = candidates;
                best = [r, c];
            }
        }
        return best;
    }

    dfs(0);
    return board;
};
