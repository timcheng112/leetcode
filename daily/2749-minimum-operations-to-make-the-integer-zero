Had reference to solution but coded out after understanding it.

Time: O(lognum1)
Space: O(1)

/**
 * @param {number} num1
 * @param {number} num2
 * @return {number}
 */
var makeTheIntegerZero = function(num1, num2) {
    // 0 = num1 - (2^i1 + num2 + 2^i2 + num2 + ... + 2^ik + num2)
    // 0 = num1 - (2^i1 + 2^i2 + ... + 2^ik) - knum2
    // 2^i1 + 2^i2 + ... + 2^ik = num1 - knum2
    // x = num1 - knum2
    let k = 1;
    while (k <= 60) {
        const x = BigInt(num1 - k * num2);
        if (x < k) return -1;
        else if (k >= count1bits(x)) {
            return k;
        }
        k++;
    }
    return -1;

    function count1bits(n) {
        let count = 0;
        while (n != 0n) {
            n &= n - 1n;
            count++;
        }
        return count;
    }
};
