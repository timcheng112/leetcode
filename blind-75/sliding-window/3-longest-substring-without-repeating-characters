Time: O(n)
Space: O(n), if all characters in string s are unique

/**
 * @param {string} s
 * @return {number}
 */
var lengthOfLongestSubstring = function (s) {
    if (s.length === 0) return 0;
    const substringSet = new Set();
    let l = 0, r = 1;
    substringSet.add(s.charAt(l));
    let longest = 1;
    while (r < s.length) {
        const currChar = s.charAt(r);
        while (substringSet.has(currChar)) {
            substringSet.delete(s.charAt(l));
            l++;
        }
        substringSet.add(currChar);
        r++;
        longest = Math.max(longest, r - l)
    }
    return longest;
};

Solution without the additional while loop

/**
 * @param {string} s
 * @return {number}
 */
var lengthOfLongestSubstring = function (s) {
    if (s.length === 0) return 0;
    const map = new Map();
    let l = 0;
    map.set(s.charAt(l), 0);
    let longest = 1;
    for (let r = 1; r < s.length; r++) {
        const currChar = s.charAt(r);
        if (map.has(currChar)) {
            l = Math.max(l, map.get(currChar) + 1)
        }
        map.set(currChar, r);
        longest = Math.max(longest, r - l + 1)
    }
    return longest;
};
