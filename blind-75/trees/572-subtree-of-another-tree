Time: O(n * m) where n and m are the number of nodes in tree and subtree respectively
Space: O(n + m) worst case if both are skewed trees, O(logn + logm) best case if both are balanced trees

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} subRoot
 * @return {boolean}
 */
var isSubtree = function (root, subRoot) {
    if (!subRoot) return true;
    if (!root) return false;
    let checkRes = false;
    if (root.val === subRoot.val) {
        checkRes = isSameTree(root, subRoot);
    }
    return checkRes || isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot)
};

var isSameTree = function (p, q) {
    if (!p && !q) {
        return true;
    } else if (!p || !q) {
        return false
    }

    if (p.val === q.val) {
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right)
    }
    return false;
};
