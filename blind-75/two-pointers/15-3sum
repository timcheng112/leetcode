Time: O(n^2)
Space: O(1) extra space, O(m) output where m is the number of triplets.

/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var threeSum = function (nums) {
    const result = [];
    nums.sort((a, b) => (a - b));
    for (let i = 0; i < nums.length; i++) {
        if (nums[i] > 0) {
            break;
        }
        if (i > 0 && nums[i] === nums[i - 1]) continue;
        let start = i + 1;
        let end = nums.length - 1;
        while (start < end) {
            if (nums[i] + nums[start] + nums[end] > 0) {
                end--;
            } else if (nums[i] + nums[start] + nums[end] < 0) {
                start++;
            } else {
                const triplet = [nums[i], nums[start], nums[end]];
                result.push(triplet);
                start++;
                end--;
                while (nums[start] === nums[start - 1] && start < end) {
                    start++;
                }
            }
        }
    }
    return result;
};
