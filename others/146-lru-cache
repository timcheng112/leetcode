Time: O(1) get, O(1) put
Space: O(n), n is the capacity.

class Node {
    constructor(key, val) {
        this.key = key;
        this.val = val;
        this.next = null;
        this.prev = null;
    }
}

/**
 * @param {number} capacity
 */
var LRUCache = function (capacity) {
    this.cache = new Map();
    this.capacity = capacity;
    this.head = new Node(0, 0);
    this.tail = new Node(0, 0);
    this.head.next = this.tail;
    this.tail.prev = this.head;

    this.remove = function (node) {
        const prev = node.prev;
        const next = node.next;
        prev.next = next;
        next.prev = prev;
    }

    this.insert = function (node) {
        const prev = this.tail.prev;
        const next = this.tail;
        prev.next = node;
        next.prev = node;
        node.prev = prev;
        node.next = next;
    }
};

/** 
 * @param {number} key
 * @return {number}
 */
LRUCache.prototype.get = function (key) {
    if (!this.cache.has(key)) return -1;
    const node = this.cache.get(key);
    this.remove(node);
    this.insert(node);
    return node.val;
};

/** 
 * @param {number} key 
 * @param {number} value
 * @return {void}
 */
LRUCache.prototype.put = function (key, value) {
    const newNode = new Node(key, value);
    if (this.cache.has(key)) {
        const node = this.cache.get(key);
        this.remove(node);
        this.insert(newNode);
        this.cache.set(key, newNode);
    } else {
        this.insert(newNode);
        this.cache.set(key, newNode);
        if (this.cache.size > this.capacity) {
            const nodeToDelete = this.head.next;
            this.remove(nodeToDelete);
            this.cache.delete(nodeToDelete.key)
        }
    }
};

/** 
 * Your LRUCache object will be instantiated and called as such:
 * var obj = new LRUCache(capacity)
 * var param_1 = obj.get(key)
 * obj.put(key,value)
 */
